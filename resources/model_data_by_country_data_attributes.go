/*
Cifra SSO REST API

SSO REST API for Cifra app

API version: 0.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package resources

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the DataByCountryDataAttributes type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DataByCountryDataAttributes{}

// DataByCountryDataAttributes struct for DataByCountryDataAttributes
type DataByCountryDataAttributes struct {
	// Country name
	Name string `json:"name"`
	Cities []DataByCountryDataAttributesCitiesInner `json:"cities"`
}

type _DataByCountryDataAttributes DataByCountryDataAttributes

// NewDataByCountryDataAttributes instantiates a new DataByCountryDataAttributes object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDataByCountryDataAttributes(name string, cities []DataByCountryDataAttributesCitiesInner) *DataByCountryDataAttributes {
	this := DataByCountryDataAttributes{}
	this.Name = name
	this.Cities = cities
	return &this
}

// NewDataByCountryDataAttributesWithDefaults instantiates a new DataByCountryDataAttributes object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDataByCountryDataAttributesWithDefaults() *DataByCountryDataAttributes {
	this := DataByCountryDataAttributes{}
	return &this
}

// GetName returns the Name field value
func (o *DataByCountryDataAttributes) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *DataByCountryDataAttributes) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *DataByCountryDataAttributes) SetName(v string) {
	o.Name = v
}

// GetCities returns the Cities field value
func (o *DataByCountryDataAttributes) GetCities() []DataByCountryDataAttributesCitiesInner {
	if o == nil {
		var ret []DataByCountryDataAttributesCitiesInner
		return ret
	}

	return o.Cities
}

// GetCitiesOk returns a tuple with the Cities field value
// and a boolean to check if the value has been set.
func (o *DataByCountryDataAttributes) GetCitiesOk() ([]DataByCountryDataAttributesCitiesInner, bool) {
	if o == nil {
		return nil, false
	}
	return o.Cities, true
}

// SetCities sets field value
func (o *DataByCountryDataAttributes) SetCities(v []DataByCountryDataAttributesCitiesInner) {
	o.Cities = v
}

func (o DataByCountryDataAttributes) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DataByCountryDataAttributes) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["name"] = o.Name
	toSerialize["cities"] = o.Cities
	return toSerialize, nil
}

func (o *DataByCountryDataAttributes) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
		"cities",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDataByCountryDataAttributes := _DataByCountryDataAttributes{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varDataByCountryDataAttributes)

	if err != nil {
		return err
	}

	*o = DataByCountryDataAttributes(varDataByCountryDataAttributes)

	return err
}

type NullableDataByCountryDataAttributes struct {
	value *DataByCountryDataAttributes
	isSet bool
}

func (v NullableDataByCountryDataAttributes) Get() *DataByCountryDataAttributes {
	return v.value
}

func (v *NullableDataByCountryDataAttributes) Set(val *DataByCountryDataAttributes) {
	v.value = val
	v.isSet = true
}

func (v NullableDataByCountryDataAttributes) IsSet() bool {
	return v.isSet
}

func (v *NullableDataByCountryDataAttributes) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDataByCountryDataAttributes(val *DataByCountryDataAttributes) *NullableDataByCountryDataAttributes {
	return &NullableDataByCountryDataAttributes{value: val, isSet: true}
}

func (v NullableDataByCountryDataAttributes) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDataByCountryDataAttributes) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


