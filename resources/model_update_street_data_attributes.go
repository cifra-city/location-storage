/*
Cifra SSO REST API

SSO REST API for Cifra app

API version: 0.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package resources

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the UpdateStreetDataAttributes type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UpdateStreetDataAttributes{}

// UpdateStreetDataAttributes struct for UpdateStreetDataAttributes
type UpdateStreetDataAttributes struct {
	// City name
	NewName *string `json:"new_name,omitempty"`
	// Street uuid
	StreetId string `json:"street_id"`
	// District uuid if u need to change district for the street
	DistrictId *string `json:"district_id,omitempty"`
}

type _UpdateStreetDataAttributes UpdateStreetDataAttributes

// NewUpdateStreetDataAttributes instantiates a new UpdateStreetDataAttributes object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdateStreetDataAttributes(streetId string) *UpdateStreetDataAttributes {
	this := UpdateStreetDataAttributes{}
	this.StreetId = streetId
	return &this
}

// NewUpdateStreetDataAttributesWithDefaults instantiates a new UpdateStreetDataAttributes object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdateStreetDataAttributesWithDefaults() *UpdateStreetDataAttributes {
	this := UpdateStreetDataAttributes{}
	return &this
}

// GetNewName returns the NewName field value if set, zero value otherwise.
func (o *UpdateStreetDataAttributes) GetNewName() string {
	if o == nil || IsNil(o.NewName) {
		var ret string
		return ret
	}
	return *o.NewName
}

// GetNewNameOk returns a tuple with the NewName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateStreetDataAttributes) GetNewNameOk() (*string, bool) {
	if o == nil || IsNil(o.NewName) {
		return nil, false
	}
	return o.NewName, true
}

// HasNewName returns a boolean if a field has been set.
func (o *UpdateStreetDataAttributes) HasNewName() bool {
	if o != nil && !IsNil(o.NewName) {
		return true
	}

	return false
}

// SetNewName gets a reference to the given string and assigns it to the NewName field.
func (o *UpdateStreetDataAttributes) SetNewName(v string) {
	o.NewName = &v
}

// GetStreetId returns the StreetId field value
func (o *UpdateStreetDataAttributes) GetStreetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.StreetId
}

// GetStreetIdOk returns a tuple with the StreetId field value
// and a boolean to check if the value has been set.
func (o *UpdateStreetDataAttributes) GetStreetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.StreetId, true
}

// SetStreetId sets field value
func (o *UpdateStreetDataAttributes) SetStreetId(v string) {
	o.StreetId = v
}

// GetDistrictId returns the DistrictId field value if set, zero value otherwise.
func (o *UpdateStreetDataAttributes) GetDistrictId() string {
	if o == nil || IsNil(o.DistrictId) {
		var ret string
		return ret
	}
	return *o.DistrictId
}

// GetDistrictIdOk returns a tuple with the DistrictId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateStreetDataAttributes) GetDistrictIdOk() (*string, bool) {
	if o == nil || IsNil(o.DistrictId) {
		return nil, false
	}
	return o.DistrictId, true
}

// HasDistrictId returns a boolean if a field has been set.
func (o *UpdateStreetDataAttributes) HasDistrictId() bool {
	if o != nil && !IsNil(o.DistrictId) {
		return true
	}

	return false
}

// SetDistrictId gets a reference to the given string and assigns it to the DistrictId field.
func (o *UpdateStreetDataAttributes) SetDistrictId(v string) {
	o.DistrictId = &v
}

func (o UpdateStreetDataAttributes) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UpdateStreetDataAttributes) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.NewName) {
		toSerialize["new_name"] = o.NewName
	}
	toSerialize["street_id"] = o.StreetId
	if !IsNil(o.DistrictId) {
		toSerialize["district_id"] = o.DistrictId
	}
	return toSerialize, nil
}

func (o *UpdateStreetDataAttributes) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"street_id",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varUpdateStreetDataAttributes := _UpdateStreetDataAttributes{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varUpdateStreetDataAttributes)

	if err != nil {
		return err
	}

	*o = UpdateStreetDataAttributes(varUpdateStreetDataAttributes)

	return err
}

type NullableUpdateStreetDataAttributes struct {
	value *UpdateStreetDataAttributes
	isSet bool
}

func (v NullableUpdateStreetDataAttributes) Get() *UpdateStreetDataAttributes {
	return v.value
}

func (v *NullableUpdateStreetDataAttributes) Set(val *UpdateStreetDataAttributes) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateStreetDataAttributes) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateStreetDataAttributes) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateStreetDataAttributes(val *UpdateStreetDataAttributes) *NullableUpdateStreetDataAttributes {
	return &NullableUpdateStreetDataAttributes{value: val, isSet: true}
}

func (v NullableUpdateStreetDataAttributes) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateStreetDataAttributes) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


