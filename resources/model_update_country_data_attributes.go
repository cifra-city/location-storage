/*
Cifra SSO REST API

SSO REST API for Cifra app

API version: 0.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package resources

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the UpdateCountryDataAttributes type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UpdateCountryDataAttributes{}

// UpdateCountryDataAttributes struct for UpdateCountryDataAttributes
type UpdateCountryDataAttributes struct {
	// New country name
	NewName string `json:"new_name"`
	// Country uuid
	CountryId string `json:"country_id"`
}

type _UpdateCountryDataAttributes UpdateCountryDataAttributes

// NewUpdateCountryDataAttributes instantiates a new UpdateCountryDataAttributes object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdateCountryDataAttributes(newName string, countryId string) *UpdateCountryDataAttributes {
	this := UpdateCountryDataAttributes{}
	this.NewName = newName
	this.CountryId = countryId
	return &this
}

// NewUpdateCountryDataAttributesWithDefaults instantiates a new UpdateCountryDataAttributes object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdateCountryDataAttributesWithDefaults() *UpdateCountryDataAttributes {
	this := UpdateCountryDataAttributes{}
	return &this
}

// GetNewName returns the NewName field value
func (o *UpdateCountryDataAttributes) GetNewName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.NewName
}

// GetNewNameOk returns a tuple with the NewName field value
// and a boolean to check if the value has been set.
func (o *UpdateCountryDataAttributes) GetNewNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.NewName, true
}

// SetNewName sets field value
func (o *UpdateCountryDataAttributes) SetNewName(v string) {
	o.NewName = v
}

// GetCountryId returns the CountryId field value
func (o *UpdateCountryDataAttributes) GetCountryId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CountryId
}

// GetCountryIdOk returns a tuple with the CountryId field value
// and a boolean to check if the value has been set.
func (o *UpdateCountryDataAttributes) GetCountryIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CountryId, true
}

// SetCountryId sets field value
func (o *UpdateCountryDataAttributes) SetCountryId(v string) {
	o.CountryId = v
}

func (o UpdateCountryDataAttributes) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UpdateCountryDataAttributes) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["new_name"] = o.NewName
	toSerialize["country_id"] = o.CountryId
	return toSerialize, nil
}

func (o *UpdateCountryDataAttributes) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"new_name",
		"country_id",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varUpdateCountryDataAttributes := _UpdateCountryDataAttributes{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varUpdateCountryDataAttributes)

	if err != nil {
		return err
	}

	*o = UpdateCountryDataAttributes(varUpdateCountryDataAttributes)

	return err
}

type NullableUpdateCountryDataAttributes struct {
	value *UpdateCountryDataAttributes
	isSet bool
}

func (v NullableUpdateCountryDataAttributes) Get() *UpdateCountryDataAttributes {
	return v.value
}

func (v *NullableUpdateCountryDataAttributes) Set(val *UpdateCountryDataAttributes) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateCountryDataAttributes) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateCountryDataAttributes) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateCountryDataAttributes(val *UpdateCountryDataAttributes) *NullableUpdateCountryDataAttributes {
	return &NullableUpdateCountryDataAttributes{value: val, isSet: true}
}

func (v NullableUpdateCountryDataAttributes) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateCountryDataAttributes) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


