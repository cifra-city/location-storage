/*
Cifra SSO REST API

SSO REST API for Cifra app

API version: 0.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package resources

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the UpdateDistrictDataAttributes type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UpdateDistrictDataAttributes{}

// UpdateDistrictDataAttributes struct for UpdateDistrictDataAttributes
type UpdateDistrictDataAttributes struct {
	// City new name
	NewName *string `json:"new_name,omitempty"`
	// district uuid
	DistrictId string `json:"district_id"`
	// City uuid if u need to change city for the district
	CityId *string `json:"city_id,omitempty"`
}

type _UpdateDistrictDataAttributes UpdateDistrictDataAttributes

// NewUpdateDistrictDataAttributes instantiates a new UpdateDistrictDataAttributes object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdateDistrictDataAttributes(districtId string) *UpdateDistrictDataAttributes {
	this := UpdateDistrictDataAttributes{}
	this.DistrictId = districtId
	return &this
}

// NewUpdateDistrictDataAttributesWithDefaults instantiates a new UpdateDistrictDataAttributes object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdateDistrictDataAttributesWithDefaults() *UpdateDistrictDataAttributes {
	this := UpdateDistrictDataAttributes{}
	return &this
}

// GetNewName returns the NewName field value if set, zero value otherwise.
func (o *UpdateDistrictDataAttributes) GetNewName() string {
	if o == nil || IsNil(o.NewName) {
		var ret string
		return ret
	}
	return *o.NewName
}

// GetNewNameOk returns a tuple with the NewName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateDistrictDataAttributes) GetNewNameOk() (*string, bool) {
	if o == nil || IsNil(o.NewName) {
		return nil, false
	}
	return o.NewName, true
}

// HasNewName returns a boolean if a field has been set.
func (o *UpdateDistrictDataAttributes) HasNewName() bool {
	if o != nil && !IsNil(o.NewName) {
		return true
	}

	return false
}

// SetNewName gets a reference to the given string and assigns it to the NewName field.
func (o *UpdateDistrictDataAttributes) SetNewName(v string) {
	o.NewName = &v
}

// GetDistrictId returns the DistrictId field value
func (o *UpdateDistrictDataAttributes) GetDistrictId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DistrictId
}

// GetDistrictIdOk returns a tuple with the DistrictId field value
// and a boolean to check if the value has been set.
func (o *UpdateDistrictDataAttributes) GetDistrictIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DistrictId, true
}

// SetDistrictId sets field value
func (o *UpdateDistrictDataAttributes) SetDistrictId(v string) {
	o.DistrictId = v
}

// GetCityId returns the CityId field value if set, zero value otherwise.
func (o *UpdateDistrictDataAttributes) GetCityId() string {
	if o == nil || IsNil(o.CityId) {
		var ret string
		return ret
	}
	return *o.CityId
}

// GetCityIdOk returns a tuple with the CityId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateDistrictDataAttributes) GetCityIdOk() (*string, bool) {
	if o == nil || IsNil(o.CityId) {
		return nil, false
	}
	return o.CityId, true
}

// HasCityId returns a boolean if a field has been set.
func (o *UpdateDistrictDataAttributes) HasCityId() bool {
	if o != nil && !IsNil(o.CityId) {
		return true
	}

	return false
}

// SetCityId gets a reference to the given string and assigns it to the CityId field.
func (o *UpdateDistrictDataAttributes) SetCityId(v string) {
	o.CityId = &v
}

func (o UpdateDistrictDataAttributes) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UpdateDistrictDataAttributes) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.NewName) {
		toSerialize["new_name"] = o.NewName
	}
	toSerialize["district_id"] = o.DistrictId
	if !IsNil(o.CityId) {
		toSerialize["city_id"] = o.CityId
	}
	return toSerialize, nil
}

func (o *UpdateDistrictDataAttributes) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"district_id",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varUpdateDistrictDataAttributes := _UpdateDistrictDataAttributes{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varUpdateDistrictDataAttributes)

	if err != nil {
		return err
	}

	*o = UpdateDistrictDataAttributes(varUpdateDistrictDataAttributes)

	return err
}

type NullableUpdateDistrictDataAttributes struct {
	value *UpdateDistrictDataAttributes
	isSet bool
}

func (v NullableUpdateDistrictDataAttributes) Get() *UpdateDistrictDataAttributes {
	return v.value
}

func (v *NullableUpdateDistrictDataAttributes) Set(val *UpdateDistrictDataAttributes) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateDistrictDataAttributes) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateDistrictDataAttributes) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateDistrictDataAttributes(val *UpdateDistrictDataAttributes) *NullableUpdateDistrictDataAttributes {
	return &NullableUpdateDistrictDataAttributes{value: val, isSet: true}
}

func (v NullableUpdateDistrictDataAttributes) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateDistrictDataAttributes) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


