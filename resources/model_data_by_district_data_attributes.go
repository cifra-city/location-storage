/*
Cifra SSO REST API

SSO REST API for Cifra app

API version: 0.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package resources

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the DataByDistrictDataAttributes type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DataByDistrictDataAttributes{}

// DataByDistrictDataAttributes struct for DataByDistrictDataAttributes
type DataByDistrictDataAttributes struct {
	// district name
	Name string `json:"name"`
	// city uuid
	City string `json:"city"`
	Streets []DataByDistrictDataAttributesStreetsInner `json:"streets"`
}

type _DataByDistrictDataAttributes DataByDistrictDataAttributes

// NewDataByDistrictDataAttributes instantiates a new DataByDistrictDataAttributes object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDataByDistrictDataAttributes(name string, city string, streets []DataByDistrictDataAttributesStreetsInner) *DataByDistrictDataAttributes {
	this := DataByDistrictDataAttributes{}
	this.Name = name
	this.City = city
	this.Streets = streets
	return &this
}

// NewDataByDistrictDataAttributesWithDefaults instantiates a new DataByDistrictDataAttributes object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDataByDistrictDataAttributesWithDefaults() *DataByDistrictDataAttributes {
	this := DataByDistrictDataAttributes{}
	return &this
}

// GetName returns the Name field value
func (o *DataByDistrictDataAttributes) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *DataByDistrictDataAttributes) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *DataByDistrictDataAttributes) SetName(v string) {
	o.Name = v
}

// GetCity returns the City field value
func (o *DataByDistrictDataAttributes) GetCity() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.City
}

// GetCityOk returns a tuple with the City field value
// and a boolean to check if the value has been set.
func (o *DataByDistrictDataAttributes) GetCityOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.City, true
}

// SetCity sets field value
func (o *DataByDistrictDataAttributes) SetCity(v string) {
	o.City = v
}

// GetStreets returns the Streets field value
func (o *DataByDistrictDataAttributes) GetStreets() []DataByDistrictDataAttributesStreetsInner {
	if o == nil {
		var ret []DataByDistrictDataAttributesStreetsInner
		return ret
	}

	return o.Streets
}

// GetStreetsOk returns a tuple with the Streets field value
// and a boolean to check if the value has been set.
func (o *DataByDistrictDataAttributes) GetStreetsOk() ([]DataByDistrictDataAttributesStreetsInner, bool) {
	if o == nil {
		return nil, false
	}
	return o.Streets, true
}

// SetStreets sets field value
func (o *DataByDistrictDataAttributes) SetStreets(v []DataByDistrictDataAttributesStreetsInner) {
	o.Streets = v
}

func (o DataByDistrictDataAttributes) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DataByDistrictDataAttributes) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["name"] = o.Name
	toSerialize["city"] = o.City
	toSerialize["streets"] = o.Streets
	return toSerialize, nil
}

func (o *DataByDistrictDataAttributes) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
		"city",
		"streets",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDataByDistrictDataAttributes := _DataByDistrictDataAttributes{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varDataByDistrictDataAttributes)

	if err != nil {
		return err
	}

	*o = DataByDistrictDataAttributes(varDataByDistrictDataAttributes)

	return err
}

type NullableDataByDistrictDataAttributes struct {
	value *DataByDistrictDataAttributes
	isSet bool
}

func (v NullableDataByDistrictDataAttributes) Get() *DataByDistrictDataAttributes {
	return v.value
}

func (v *NullableDataByDistrictDataAttributes) Set(val *DataByDistrictDataAttributes) {
	v.value = val
	v.isSet = true
}

func (v NullableDataByDistrictDataAttributes) IsSet() bool {
	return v.isSet
}

func (v *NullableDataByDistrictDataAttributes) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDataByDistrictDataAttributes(val *DataByDistrictDataAttributes) *NullableDataByDistrictDataAttributes {
	return &NullableDataByDistrictDataAttributes{value: val, isSet: true}
}

func (v NullableDataByDistrictDataAttributes) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDataByDistrictDataAttributes) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


