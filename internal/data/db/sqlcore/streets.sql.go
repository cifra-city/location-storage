// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: streets.sql

package sqlcore

import (
	"context"

	"github.com/google/uuid"
)

const createStreet = `-- name: CreateStreet :one
INSERT INTO streets (id, name, city_id, location)
VALUES ($1, $2, $3, $4)
RETURNING id, name, city_id, location
`

type CreateStreetParams struct {
	ID       uuid.UUID
	Name     string
	CityID   uuid.UUID
	Location interface{}
}

func (q *Queries) CreateStreet(ctx context.Context, arg CreateStreetParams) (Street, error) {
	row := q.db.QueryRowContext(ctx, createStreet,
		arg.ID,
		arg.Name,
		arg.CityID,
		arg.Location,
	)
	var i Street
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.CityID,
		&i.Location,
	)
	return i, err
}

const deleteStreet = `-- name: DeleteStreet :exec
DELETE FROM streets
WHERE id = $1
`

func (q *Queries) DeleteStreet(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteStreet, id)
	return err
}

const getStreetByID = `-- name: GetStreetByID :one
SELECT id, name, city_id, location FROM streets
WHERE id = $1
`

func (q *Queries) GetStreetByID(ctx context.Context, id uuid.UUID) (Street, error) {
	row := q.db.QueryRowContext(ctx, getStreetByID, id)
	var i Street
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.CityID,
		&i.Location,
	)
	return i, err
}

const getStreetByName = `-- name: GetStreetByName :one
SELECT id, name, city_id, location FROM streets
WHERE name = $1
`

func (q *Queries) GetStreetByName(ctx context.Context, name string) (Street, error) {
	row := q.db.QueryRowContext(ctx, getStreetByName, name)
	var i Street
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.CityID,
		&i.Location,
	)
	return i, err
}

const listStreetsByCity = `-- name: ListStreetsByCity :many
SELECT id, name, city_id, location
FROM streets
WHERE city_id = $1
ORDER BY name
`

func (q *Queries) ListStreetsByCity(ctx context.Context, cityID uuid.UUID) ([]Street, error) {
	rows, err := q.db.QueryContext(ctx, listStreetsByCity, cityID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Street
	for rows.Next() {
		var i Street
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.CityID,
			&i.Location,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateStreet = `-- name: UpdateStreet :one
UPDATE streets
SET name = $2, location = $3
WHERE id = $1
RETURNING id, name, city_id, location
`

type UpdateStreetParams struct {
	ID       uuid.UUID
	Name     string
	Location interface{}
}

func (q *Queries) UpdateStreet(ctx context.Context, arg UpdateStreetParams) (Street, error) {
	row := q.db.QueryRowContext(ctx, updateStreet, arg.ID, arg.Name, arg.Location)
	var i Street
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.CityID,
		&i.Location,
	)
	return i, err
}

const updateStreetCity = `-- name: UpdateStreetCity :one
UPDATE streets
SET city_id = $2
WHERE id = $1
RETURNING id, name, city_id, location
`

type UpdateStreetCityParams struct {
	ID     uuid.UUID
	CityID uuid.UUID
}

func (q *Queries) UpdateStreetCity(ctx context.Context, arg UpdateStreetCityParams) (Street, error) {
	row := q.db.QueryRowContext(ctx, updateStreetCity, arg.ID, arg.CityID)
	var i Street
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.CityID,
		&i.Location,
	)
	return i, err
}

const updateStreetLocation = `-- name: UpdateStreetLocation :one
UPDATE streets
SET location = $2
WHERE id = $1
RETURNING id, name, city_id, location
`

type UpdateStreetLocationParams struct {
	ID       uuid.UUID
	Location interface{}
}

func (q *Queries) UpdateStreetLocation(ctx context.Context, arg UpdateStreetLocationParams) (Street, error) {
	row := q.db.QueryRowContext(ctx, updateStreetLocation, arg.ID, arg.Location)
	var i Street
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.CityID,
		&i.Location,
	)
	return i, err
}

const updateStreetName = `-- name: UpdateStreetName :one
UPDATE streets
SET name = $2
WHERE id = $1
RETURNING id, name, city_id, location
`

type UpdateStreetNameParams struct {
	ID   uuid.UUID
	Name string
}

func (q *Queries) UpdateStreetName(ctx context.Context, arg UpdateStreetNameParams) (Street, error) {
	row := q.db.QueryRowContext(ctx, updateStreetName, arg.ID, arg.Name)
	var i Street
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.CityID,
		&i.Location,
	)
	return i, err
}
