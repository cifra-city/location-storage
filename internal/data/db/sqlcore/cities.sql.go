// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: cities.sql

package sqlcore

import (
	"context"

	"github.com/google/uuid"
)

const createCity = `-- name: CreateCity :one
INSERT INTO cities (id, name, location)
VALUES ($1, $2, $3)
RETURNING id, name, location
`

type CreateCityParams struct {
	ID       uuid.UUID
	Name     string
	Location interface{}
}

func (q *Queries) CreateCity(ctx context.Context, arg CreateCityParams) (City, error) {
	row := q.db.QueryRowContext(ctx, createCity, arg.ID, arg.Name, arg.Location)
	var i City
	err := row.Scan(&i.ID, &i.Name, &i.Location)
	return i, err
}

const deleteCity = `-- name: DeleteCity :exec
DELETE FROM cities
WHERE id = $1
`

func (q *Queries) DeleteCity(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteCity, id)
	return err
}

const getCityByID = `-- name: GetCityByID :one
SELECT id, name, location FROM cities
WHERE id = $1
`

func (q *Queries) GetCityByID(ctx context.Context, id uuid.UUID) (City, error) {
	row := q.db.QueryRowContext(ctx, getCityByID, id)
	var i City
	err := row.Scan(&i.ID, &i.Name, &i.Location)
	return i, err
}

const getCityByName = `-- name: GetCityByName :one
SELECT id, name, location FROM cities
WHERE name = $1
`

func (q *Queries) GetCityByName(ctx context.Context, name string) (City, error) {
	row := q.db.QueryRowContext(ctx, getCityByName, name)
	var i City
	err := row.Scan(&i.ID, &i.Name, &i.Location)
	return i, err
}

const listCities = `-- name: ListCities :many
SELECT id, name, location FROM cities
ORDER BY name
`

func (q *Queries) ListCities(ctx context.Context) ([]City, error) {
	rows, err := q.db.QueryContext(ctx, listCities)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []City
	for rows.Next() {
		var i City
		if err := rows.Scan(&i.ID, &i.Name, &i.Location); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateCity = `-- name: UpdateCity :one
UPDATE cities
SET name = $2, location = $3
WHERE id = $1
RETURNING id, name, location
`

type UpdateCityParams struct {
	ID       uuid.UUID
	Name     string
	Location interface{}
}

func (q *Queries) UpdateCity(ctx context.Context, arg UpdateCityParams) (City, error) {
	row := q.db.QueryRowContext(ctx, updateCity, arg.ID, arg.Name, arg.Location)
	var i City
	err := row.Scan(&i.ID, &i.Name, &i.Location)
	return i, err
}

const updateCityLocation = `-- name: UpdateCityLocation :one
UPDATE cities
SET location = $2
WHERE id = $1
RETURNING id, name, location
`

type UpdateCityLocationParams struct {
	ID       uuid.UUID
	Location interface{}
}

func (q *Queries) UpdateCityLocation(ctx context.Context, arg UpdateCityLocationParams) (City, error) {
	row := q.db.QueryRowContext(ctx, updateCityLocation, arg.ID, arg.Location)
	var i City
	err := row.Scan(&i.ID, &i.Name, &i.Location)
	return i, err
}

const updateCityName = `-- name: UpdateCityName :one
UPDATE cities
SET name = $2
WHERE id = $1
RETURNING id, name, location
`

type UpdateCityNameParams struct {
	ID   uuid.UUID
	Name string
}

func (q *Queries) UpdateCityName(ctx context.Context, arg UpdateCityNameParams) (City, error) {
	row := q.db.QueryRowContext(ctx, updateCityName, arg.ID, arg.Name)
	var i City
	err := row.Scan(&i.ID, &i.Name, &i.Location)
	return i, err
}
