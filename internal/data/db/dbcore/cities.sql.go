// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: cities.sql

package dbcore

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const createCity = `-- name: CreateCity :exec
INSERT INTO cities (name, country_id) VALUES ($1, $2)
`

type CreateCityParams struct {
	Name      sql.NullString
	CountryID sql.NullInt32
}

func (q *Queries) CreateCity(ctx context.Context, arg CreateCityParams) error {
	_, err := q.db.ExecContext(ctx, createCity, arg.Name, arg.CountryID)
	return err
}

const deleteCity = `-- name: DeleteCity :exec
DELETE FROM cities WHERE id = $1
`

func (q *Queries) DeleteCity(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteCity, id)
	return err
}

const getCitiesByCountry = `-- name: GetCitiesByCountry :many
SELECT id, name FROM cities WHERE country_id = $1
`

type GetCitiesByCountryRow struct {
	ID   uuid.UUID
	Name sql.NullString
}

func (q *Queries) GetCitiesByCountry(ctx context.Context, countryID sql.NullInt32) ([]GetCitiesByCountryRow, error) {
	rows, err := q.db.QueryContext(ctx, getCitiesByCountry, countryID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetCitiesByCountryRow
	for rows.Next() {
		var i GetCitiesByCountryRow
		if err := rows.Scan(&i.ID, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getCityByID = `-- name: GetCityByID :one
SELECT id, name, country_id FROM cities WHERE id = $1
`

func (q *Queries) GetCityByID(ctx context.Context, id uuid.UUID) (City, error) {
	row := q.db.QueryRowContext(ctx, getCityByID, id)
	var i City
	err := row.Scan(&i.ID, &i.Name, &i.CountryID)
	return i, err
}

const updateCity = `-- name: UpdateCity :exec
UPDATE cities SET name = $2, country_id = $3 WHERE id = $1
`

type UpdateCityParams struct {
	ID        uuid.UUID
	Name      sql.NullString
	CountryID sql.NullInt32
}

func (q *Queries) UpdateCity(ctx context.Context, arg UpdateCityParams) error {
	_, err := q.db.ExecContext(ctx, updateCity, arg.ID, arg.Name, arg.CountryID)
	return err
}
