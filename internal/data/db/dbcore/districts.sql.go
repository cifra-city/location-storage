// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: districts.sql

package dbcore

import (
	"context"

	"github.com/google/uuid"
)

const createDistrict = `-- name: CreateDistrict :one
INSERT INTO districts (
   name,
   city_id
) VALUES (
  $1, $2
) RETURNING id, name, city_id
`

type CreateDistrictParams struct {
	Name   string
	CityID uuid.UUID
}

func (q *Queries) CreateDistrict(ctx context.Context, arg CreateDistrictParams) (District, error) {
	row := q.db.QueryRowContext(ctx, createDistrict, arg.Name, arg.CityID)
	var i District
	err := row.Scan(&i.ID, &i.Name, &i.CityID)
	return i, err
}

const deleteDistrict = `-- name: DeleteDistrict :exec
DELETE FROM districts WHERE id = $1
`

func (q *Queries) DeleteDistrict(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteDistrict, id)
	return err
}

const getDistrictByID = `-- name: GetDistrictByID :one
SELECT id, name, city_id FROM districts WHERE id = $1
`

func (q *Queries) GetDistrictByID(ctx context.Context, id uuid.UUID) (District, error) {
	row := q.db.QueryRowContext(ctx, getDistrictByID, id)
	var i District
	err := row.Scan(&i.ID, &i.Name, &i.CityID)
	return i, err
}

const getDistrictByName = `-- name: GetDistrictByName :one
SELECT id, name, city_id FROM districts WHERE name = $1
`

func (q *Queries) GetDistrictByName(ctx context.Context, name string) (District, error) {
	row := q.db.QueryRowContext(ctx, getDistrictByName, name)
	var i District
	err := row.Scan(&i.ID, &i.Name, &i.CityID)
	return i, err
}

const getDistrictsByCity = `-- name: GetDistrictsByCity :many
SELECT id, name FROM districts WHERE city_id = $1
`

type GetDistrictsByCityRow struct {
	ID   uuid.UUID
	Name string
}

func (q *Queries) GetDistrictsByCity(ctx context.Context, cityID uuid.UUID) ([]GetDistrictsByCityRow, error) {
	rows, err := q.db.QueryContext(ctx, getDistrictsByCity, cityID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetDistrictsByCityRow
	for rows.Next() {
		var i GetDistrictsByCityRow
		if err := rows.Scan(&i.ID, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateDistrict = `-- name: UpdateDistrict :one
UPDATE districts
SET
    name = $2,
    city_id = $3
WHERE id = $1
RETURNING id, name, city_id
`

type UpdateDistrictParams struct {
	ID     uuid.UUID
	Name   string
	CityID uuid.UUID
}

func (q *Queries) UpdateDistrict(ctx context.Context, arg UpdateDistrictParams) (District, error) {
	row := q.db.QueryRowContext(ctx, updateDistrict, arg.ID, arg.Name, arg.CityID)
	var i District
	err := row.Scan(&i.ID, &i.Name, &i.CityID)
	return i, err
}
