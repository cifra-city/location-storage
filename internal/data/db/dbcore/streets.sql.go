// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: streets.sql

package dbcore

import (
	"context"

	"github.com/google/uuid"
)

const createStreet = `-- name: CreateStreet :one
INSERT INTO streets (
    name,
    district_id
) VALUES (
    $1, $2
)  RETURNING id, name, district_id
`

type CreateStreetParams struct {
	Name       string
	DistrictID uuid.UUID
}

func (q *Queries) CreateStreet(ctx context.Context, arg CreateStreetParams) (Street, error) {
	row := q.db.QueryRowContext(ctx, createStreet, arg.Name, arg.DistrictID)
	var i Street
	err := row.Scan(&i.ID, &i.Name, &i.DistrictID)
	return i, err
}

const deleteStreet = `-- name: DeleteStreet :exec
DELETE FROM streets WHERE id = $1
`

func (q *Queries) DeleteStreet(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteStreet, id)
	return err
}

const getStreetByID = `-- name: GetStreetByID :one
SELECT id, name, district_id FROM streets WHERE id = $1
`

func (q *Queries) GetStreetByID(ctx context.Context, id uuid.UUID) (Street, error) {
	row := q.db.QueryRowContext(ctx, getStreetByID, id)
	var i Street
	err := row.Scan(&i.ID, &i.Name, &i.DistrictID)
	return i, err
}

const getStreetByName = `-- name: GetStreetByName :one
SELECT id, name, district_id FROM streets WHERE name = $1
`

func (q *Queries) GetStreetByName(ctx context.Context, name string) (Street, error) {
	row := q.db.QueryRowContext(ctx, getStreetByName, name)
	var i Street
	err := row.Scan(&i.ID, &i.Name, &i.DistrictID)
	return i, err
}

const getStreetsByDistrict = `-- name: GetStreetsByDistrict :many
SELECT id, name FROM streets WHERE district_id = $1
`

type GetStreetsByDistrictRow struct {
	ID   uuid.UUID
	Name string
}

func (q *Queries) GetStreetsByDistrict(ctx context.Context, districtID uuid.UUID) ([]GetStreetsByDistrictRow, error) {
	rows, err := q.db.QueryContext(ctx, getStreetsByDistrict, districtID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetStreetsByDistrictRow
	for rows.Next() {
		var i GetStreetsByDistrictRow
		if err := rows.Scan(&i.ID, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateStreet = `-- name: UpdateStreet :one
UPDATE streets SET
   name = $2,
   district_id = $3
WHERE
   id = $1
RETURNING id, name, district_id
`

type UpdateStreetParams struct {
	ID         uuid.UUID
	Name       string
	DistrictID uuid.UUID
}

func (q *Queries) UpdateStreet(ctx context.Context, arg UpdateStreetParams) (Street, error) {
	row := q.db.QueryRowContext(ctx, updateStreet, arg.ID, arg.Name, arg.DistrictID)
	var i Street
	err := row.Scan(&i.ID, &i.Name, &i.DistrictID)
	return i, err
}
