// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: countries.sql

package dbcore

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const createCountry = `-- name: CreateCountry :exec
INSERT INTO countries (name) VALUES ($1)
`

func (q *Queries) CreateCountry(ctx context.Context, name sql.NullString) error {
	_, err := q.db.ExecContext(ctx, createCountry, name)
	return err
}

const deleteCountry = `-- name: DeleteCountry :exec
DELETE FROM countries WHERE id = $1
`

func (q *Queries) DeleteCountry(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteCountry, id)
	return err
}

const getAllCountries = `-- name: GetAllCountries :many
SELECT id, name FROM countries
`

func (q *Queries) GetAllCountries(ctx context.Context) ([]Country, error) {
	rows, err := q.db.QueryContext(ctx, getAllCountries)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Country
	for rows.Next() {
		var i Country
		if err := rows.Scan(&i.ID, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getCountryByID = `-- name: GetCountryByID :one
SELECT id, name FROM countries WHERE id = $1
`

func (q *Queries) GetCountryByID(ctx context.Context, id uuid.UUID) (Country, error) {
	row := q.db.QueryRowContext(ctx, getCountryByID, id)
	var i Country
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}

const updateCountry = `-- name: UpdateCountry :exec
UPDATE countries SET name = $2 WHERE id = $1
`

type UpdateCountryParams struct {
	ID   uuid.UUID
	Name sql.NullString
}

func (q *Queries) UpdateCountry(ctx context.Context, arg UpdateCountryParams) error {
	_, err := q.db.ExecContext(ctx, updateCountry, arg.ID, arg.Name)
	return err
}
